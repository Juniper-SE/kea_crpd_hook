#!/usr/bin/bash


DHCP_SERVER="/mnt/hgfs/bsherwood/juniper/git/kea/src/bin/dhcp4/kea-dhcp4"

HOOK_LIB="/mnt/hgfs/bsherwood/juniper/git/kea/src/hooks/dhcp/run_script/.libs/libdhcp_run_script.so"



############################################################
function net_stop {

    echo "=== net stop ==="
    ip netns delete dhcpns
    ip link set br2 down
    ip link del dev br2
    ip link del dev dhcp1
    #ip link del dev dhcp2
    
    ip link del crpd01
    ip link del crpd02
    ip link del crpd_bridge

}

############################################################
function net_start {

    echo "=== net start ==="
    ip link add br2 type bridge
    ip link add dhcp1 type veth peer dhcp2
    ip link set dhcp1 master br2
    ip addr add 10.10.10.1/24 dev br2
    ip link set br2 up
    ip link set dhcp1 up
    
    ip netns add dhcpns
    ip link set dhcp2 netns dhcpns
    ip link set dhcp1 up
    #ip netns exec dhcpns ip addr add 10.10.10.2/24 dev dhcp2
    ip netns exec dhcpns ip link set dhcp2 up

}

############################################################
function kea_server {

    set -x
    $DHCP_SERVER -d -c etc/kea/kea-dhcp4.conf

}

############################################################
function monitor_queue {

    set -x
    mosquitto_sub -h 10.10.10.1 -t dhcp_server

}

############################################################
function kea_client {

    set -x
    #ip netns exec dhcpns ping -c 2 10.10.10.1
    ip netns exec dhcpns dhclient -d -v 

}

############################################################
function crpd_start {

    ip link add crpd_bridge type bridge
    ip link set crpd_bridge up
    ip address add 192.168.10.1/28 dev crpd_bridge

    echo "Create crpd01"
    docker run --rm --detach --name crpd01 -h crpd01 --privileged -e SYSLOG_TO_STDOUT='yes' -v "$(pwd)"/crpd01_config:/config -v "$(pwd)"/crpd01_varlog:/var/log -it crpd:22.2R1.9

    echo "Create crpd01 interface and assign to container"
    ip link add crpd01 type veth peer vcrpd01
    ip link set crpd01 master crpd_bridge
    ip link set crpd01 up
    pid=$(docker inspect crpd01 -f '{{.State.Pid}}')
    ip link set vcrpd01 netns $pid
    docker exec -it crpd01 bash -c "ip address add 192.168.10.2/28 dev vcrpd01"
    docker exec -it crpd01 bash -c "ip link set vcrpd01 up"
    docker exec -it crpd01 bash -c "ip route del default"
    docker exec -it crpd01 bash -c "ip route add default via 192.168.10.1"


    echo "Create crpd02"
    docker run --rm --detach --name crpd02 -h crpd02 --privileged -e SYSLOG_TO_STDOUT='yes' -v "$(pwd)"/crpd02_config:/config -v "$(pwd)"/crpd02_varlog:/var/log -it crpd:22.2R1.9

    echo "Create crpd02 interface and assign to container"
    ip link add crpd02 type veth peer vcrpd02
    ip link set crpd02 master crpd_bridge
    ip link set crpd02 up
    pid=$(docker inspect crpd02 -f '{{.State.Pid}}')
    ip link set vcrpd02 netns $pid
    docker exec -it crpd02 bash -c "ip address add 192.168.10.3/28 dev vcrpd02"
    docker exec -it crpd02 bash -c "ip link set vcrpd02 up"
    docker exec -it crpd02 bash -c "ip route del default"
    docker exec -it crpd02 bash -c "ip route add default via 192.168.10.1"


}

############################################################
function crpd_stop {

    docker stop crpd01
    docker stop crpd02
}

############################################################
function check {

    echo "=== check ==="
    set -x
    brctl show br2
    echo ""
    ip addr show dev br2
    echo ""
    ip addr show dev dhcp1
    echo ""
    ip netns exec dhcpns ip addr
    echo ""
    ip netns exec dhcpns ping -c 3 10.10.10.1
}

########## MAIN ##########
############################################################

if [ $# -eq 0 ]; then
    echo "No function provided:"
    echo ""
    compgen -A function
    exit 1
fi


if [ "$EUID" -ne 0 ]
  then echo "Please run as root"
  exit
fi

eval "$@"

